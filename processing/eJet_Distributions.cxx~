#include <TFile.h>
#include <TTree.h>
#include <TLorentzVector.h>
#include <TGraph.h>
#include <TGraphErrors.h>
#include <TPaveStats.h>
#include "Math/LorentzVector.h"
#include "Math/Vector4D.h"
#include <TLegend.h>
#include <TROOT.h>
#include <TApplication.h>
#include <TCanvas.h>
#include <TStyle.h>
#include <TH2D.h>
#include <TF1.h>
#include <TLatex.h>
#include <TColor.h>
#include <THStack.h>
#include <TProfile.h>
#include <iostream>
#include <fstream>
#include <TMath.h>
#include <vector>
#include <math.h>
#include <TTreeReader.h>
#include <TTreeReaderValue.h>
#include <TTreeReaderArray.h>
#include <cmath>

float calc_Q_square(float inE, TLorentzVector v)
{
  return 2.*inE*v.E()*(1-TMath::Abs(v.CosTheta()));
}

int main(int argc, char *argv[])
{
  if (argc < 2) {
    std::cout<<"Syntax: [Command] [File]"<<std::endl;
    exit(EXIT_FAILURE);
  }
  //for (int iarg = 1; iarg < argc; iarg++) {
  int iarg = 1;
  TString root_file = (TString)argv[iarg];
  
  std::cout << "Opening: " << (TString)argv[iarg] << std::endl;
  
  TFile *file = TFile::Open(root_file);
  
  if (file == NULL) {
    std::cout << " File Fail" << std::endl;
    exit(EXIT_FAILURE); 
  } 
  
  file->Print();
  
  TTree *_tree_event = dynamic_cast<TTree *>(file->Get("T"));

  if (_tree_event == NULL) {
    std::cout << " Tree Fail " << std::endl;
    exit(EXIT_FAILURE);
  }

  enum {MaxNumJets = 20,kMaxConstituents = 100};

  TString infile = argv[1];
  TFile * F = new TFile(infile);
  
  TTreeReader Tree("T",F);
  int nEntries = Tree.GetEntries();
  TTreeReaderValue<int> njets(Tree,"njets");
  TTreeReaderArray<Int_t> NConst(Tree,"nComponent");
  TTreeReaderArray<Float_t> E(Tree,"e");
  TTreeReaderArray<Float_t> Eta(Tree,"eta");
  TTreeReaderArray<Float_t> Phi(Tree,"phi");
  TTreeReaderArray<Float_t> Pt(Tree,"pt");
  
  TTreeReaderArray<Float_t> gE(Tree,"matched_charged_truthE");
  TTreeReaderArray<Float_t> gEta(Tree,"matched_charged_truthEta");
  TTreeReaderArray<Float_t> gPhi(Tree,"matched_charged_truthPhi");
  TTreeReaderArray<Float_t> gPt(Tree,"matched_charged_truthPt");
  TTreeReaderArray<Int_t> gNComponent(Tree,"matched_charged_truthNComponent");

  TTreeReaderValue<Float_t> electron_gE(Tree,"electron_truthE");
  TTreeReaderValue<Float_t> electron_gEta(Tree,"electron_truthEta");
  TTreeReaderValue<Float_t> electron_gPhi(Tree,"electron_truthPhi");
  TTreeReaderValue<Float_t> electron_gPt(Tree,"electron_truthPt");
  
  //gStyle Plotting
  gStyle->SetOptStat("emr");
  gStyle->SetStatY(0.85);
  gStyle->SetStatX(0.87);
  gStyle->SetStatW(0.15);
  gStyle->SetMarkerStyle(20);
  gStyle->SetMarkerSize(1.2);
  gStyle->SetHistLineWidth(2.);
  gStyle->SetLineStyleString(2,"[12 12]"); // postscript dashes  
  TH1::SetDefaultSumw2(true);
  TH2::SetDefaultSumw2(true);
  
  //2D Histos
  TH2F * Tjve = new TH2F("ETrueJet_vs_Eelectron", "E^{True}_{Jet} (|#eta^{Jet}|<0.7) vs. E_{e}^{True}",100,0,25,100,0,25);
  TH2F * Rjve = new TH2F("ERecoJet_vs_Eelectron", "E^{Reco}_{Jet} (|#eta^{Jet}|<0.7) vs. E_{e}^{True}",100,0,25,100,0,25);

  //Ratio Histos
  TH1F * eoTj = new TH1F("ETrueJet_over_Eelectron", "E_{Reco}^{True}/E^{True}_{e} (|#eta^{Jet}|<0.7)",80,0,2);
  TH1F * eoRj = new TH1F("Eelectron_over_ERecoJet_over_Eelectron", "E_{Jet}^{Reco}/E^{True}_{e} (|#eta^{Jet}|<0.7)",80,0,2);
  TH1F * RjoTj = new TH1F("ERecoJet_over_ETrueJet", "E_{Jet}^{True}/E^{Reco}_{Jet} (|#eta^{Jet}|<0.7)",80,0,2);
  TH1F * justE = new TH1F("Reco Energy", "Energy",100,0,100);

  //Difference Histos
  TH1F * emTj = new TH1F("Eelectron_minus_ETrueJet", "E_{e}^{True} - E^{True}_{Jet} (|#eta^{Jet}|<0.7)",100,-20,30);
  TH1F * emRj = new TH1F("Eelectron_minus_ERecoJet", "E_{e}^{True} - E^{Reco}_{Jet} (|#eta^{Jet}|<0.7)",100,-20,30);
  //Detector Coordinate Histos
  TH1F * dPhiTj = new TH1F("dPhi_e_TrueJet", "|#Delta#varphi| (#varphi_{e} - #varphi^{True}_{Jet}) ", 32,0,M_PI);
  TH1F * dPhiRj = new TH1F("dPhi_e_RecoJet", "|#Delta#varphi| #varphi_{e} - #varphi(Jet^{Reco}_{Jet}) ", 32,0,M_PI);
  TH1F * dEtaTj = new TH1F("dEta_e_TrueJet", "|#Delta#eta| (#eta_{e} - #eta^{True}_{Jet})", 80,-10,10);
  TH1F * dEtaRj = new TH1F("dEta_e_RecoJet", "|#Delta#eta| (#eta_{e} - #eta^{Reco}_{Jet})", 80,-10,10);

  
  TH1F* Q2 = new TH1F("Q2","Q^{2}",500,0,500);
  TH1I * PID = new TH1I("PID_Histo", "PID",1000,-500,500);
  int ev = 0;
  while ( Tree.Next() ){
    if (ev%10000==0) fprintf(stderr,"%d: Entry %i out of %d\n",__LINE__,ev,nEntries);
    float Emin = 3.0;
    float hardest_jet_E = 0;
    int hardest = -1; //hardest jet index
    
    for (int n = 0; n < *njets; ++n) {//ALL truth jet loop
      //Detector Coordinate Histos
      
      if (std::isnan(gE)) continue;
      Float_t True_DeltaPhi = TMath::Abs(TVector2::Phi_mpi_pi(*electron_gPhi - gPhi[n]));
      Float_t Reco_DeltaPhi = TMath::Abs(TVector2::Phi_mpi_pi(*electron_gPhi - Phi[n]));
      dPhiTj->Fill(True_DeltaPhi);
      dPhiRj->Fill(Reco_DeltaPhi);
      dEtaTj->Fill(*electron_gEta-gEta[n]);
      dEtaRj->Fill(*electron_gEta-Eta[n]);
      
      TLorentzVector e_vector;
      e_vector.SetPtEtaPhiE(*electron_gPt,*electron_gEta,*electron_gPhi,*electron_gE);
      Float_t Q_square = calc_Q_square(20,e_vector); //*Electron Beam of 20 GeV/c
      Q2->Fill(Q_square);    
      //Inclusive Spectra
      Rjve->Fill(*electron_gE,E[n]);
      Tjve->Fill(*electron_gE,gE[n]);
      RjoTj->Fill(E[n]/gE[n]);
      
      //Kinematic Cuts
      // if (True_DeltaPhi < M_PI/2) continue;
      // if (gE[n] < 3.0) continue;
      // if (TMath::Abs(eta[n]) < 0.7) continue;
      //*Electron/Jet Comparisons
      float eE = *electron_gE;
      eoTj->Fill(gE[n]/eE);
      eoRj->Fill(E[n]/eE);
      emTj->Fill(*electron_gE-gE[n]);
      emRj->Fill(*electron_gE-E[n]);
    }
  }
   //entry loop
  
  //Write to new root file
  TFile* fout = new TFile("Histograms_Jet_Callibration.root","RECREATE");
  justE->Write();
  PID->Write();
  Tjve->GetXaxis()->SetTitle("E^{True}_{electron} [GeV]");
  Rjve->GetXaxis()->SetTitle("E^{True}_{electron} [GeV]");
  Tjve->GetYaxis()->SetTitle("E^{True}_{Jet} [GeV]");
  Rjve->GetYaxis()->SetTitle("E^{Reco}_{Jet} [GeV]");
  Tjve->Write();
  Rjve->Write();

  eoTj->GetXaxis()->SetTitle("E_{e}/E_{jet}");
  eoRj->GetXaxis()->SetTitle("E_{e}/E_{jet}");
  eoTj->Write();
  eoRj->Write();

  RjoTj->GetXaxis()->SetTitle("E_{Jet}^{Reco}/E_{Jet}^{True}");
  RjoTj->Write();

  emTj->GetXaxis()->SetTitle("E_{e}-E_{jet}");
  emRj->GetXaxis()->SetTitle("E_{e}-E_{jet}");
  emTj->Write();
  emRj->Write();

  dPhiTj->GetXaxis()->SetTitle("#Delta#varphi");
  dPhiRj->GetXaxis()->SetTitle("#Delta#varphi");
  dPhiTj->Write();
  dPhiRj->Write();

  dEtaTj->GetXaxis()->SetTitle("#Delta#eta");
  dEtaRj->GetXaxis()->SetTitle("#Delta#eta");
  dEtaTj->Write();
  dEtaRj->Write();

  Q2->Write();
  // H_dR->Write();
  // H_NExtra_Matches->Write();

  fout->Close();
  
}

